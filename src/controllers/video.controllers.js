import mongoose, { isValidObjectId } from "mongoose";
import { Video } from "../models/video.models.js";
import { User } from "../models/user.models.js";
import { Subscription } from "../models/subscription.models.js";
import { Like } from "../models/like.models.js";
import { ApiError } from "../utils/ApiError.js";
import { ApiResponse } from "../utils/ApiResponse.js";
import { asyncHandler } from "../utils/asyncHandler.js";
import {
  deleteFromCloudinary,
  uploadOnCloudinary,
} from "../utils/cloudinary.js";

const getAllVideos = asyncHandler(async (req, res) => {
  const {
    page = 1,
    limit = 10,
    query = "",
    sortBy = "createdAt",
    sortType = "desc",
    userId,
  } = req.query;
  //TODO: get all videos based on query, sort, pagination
  if (userId && !isValidObjectId(userId)) {
    throw new ApiError(400, "Invalid userId provided.");
  }

  let videos;
  try {
    videos = await Video.aggregate([
      {
        $match: {
          $or: [
            { title: { $regex: query, $options: "i" } },
            { description: { $regex: query, $options: "i" } },
          ],
          ...(userId ? { owner: new mongoose.Types.ObjectId(userId) } : {}),
        }
      },
      {
        $lookup: {
          from: "users",
          localField: "owner",
          foreignField: "_id",
          as: "owner", 
          pipeline: [
            {
              $project: {
                username: 1,
                email: 1,
                fullname: 1,
                avatar: 1,
              }
            }
          ]
        }
      },
      {
        $project: {
          title: 1,
          description: 1,
          thumbnail: 1,
          videoFile: 1,
          duration: 1,
          isPublished: 1,
          views: 1,
          createdAt: 1,
          updatedAt: 1,
          owner: { $arrayElemAt: ["$owner", 0] }, // Get the first element of the array
        }
      },
      {
        $sort: {
          [sortBy]: sortType === "desc" ? -1 : 1,
        }
      },
      {
        $skip: (page - 1) * limit
      },
      {
        $limit: parseInt(limit)
      }
    ]);
    // console.log("Videos: ", videos);

    // count the total number of videos matching the query
    const videoCount = await Video.countDocuments({
      $or: [
        { title: { $regex: query, $options: "i" } },
        { description: { $regex: query, $options: "i" } },
      ],
      ...(userId ? { owner: new mongoose.Types.ObjectId(userId) } : {}),
    });

    // count the total number of pages
    // totalPages = total number of videos / limit
    // Math.ceil is used to round up the number of pages
    const totalPages = Math.ceil(videoCount / limit);
    const response = {
      page: parseInt(page),
      limit: parseInt(limit),
      totalPages,
      totalVideos: videoCount,
      videos,
    };
    return res
      .status(200)
      .json(new ApiResponse(200, response, "Videos fetched successfully"));

  } catch (error) {
    console.error("Error fetching videos:", error);
    throw new ApiError(500, "Something went wrong while fetching Videos.");
  } 

});

const publishAVideo = asyncHandler(async (req, res) => {
  const { title, description } = req.body;
  if (!title) {
    throw new ApiError(400, "Title is required");
  }

  // TODO: get video, upload to cloudinary, create video

  const videoFilePath = req.files?.videoFile?.[0]?.path;
  console.log("Video File Path: ", videoFilePath);
  const thumbnailPath = req.files?.thumbnail?.[0]?.path;
  console.log("Thumbnail Path: ", thumbnailPath);
  if (!videoFilePath) {
    throw new ApiError(400, "Video file is required");
  }

  let videoFile;
  try {
    videoFile = await uploadOnCloudinary(videoFilePath);
  } catch (error) {
    throw new ApiError(500, "Error uploading video file");
  }
  let thumbnail;
  try {
    thumbnail = await uploadOnCloudinary(thumbnailPath);
  } catch (error) {
    throw new ApiError(500, "Error uploading thumbnail");
  }
  
  // If thumbnail is not provided, generate a thumbnail URL from the video URL
  // The thumbnail URL is generated by replacing the video file extension with .jpg and adding the transformation parameters for thumbnail generation
  // The transformation parameters are:
  // - so_auto: Automatically select the best transformation for the video
  // - du_50: Set the duration to 50 seconds
  // - .jpg: Set the file extension to .jpg
  // The generated thumbnail URL is used to display a thumbnail for the video
  let thumbnailUrl = "";
  if (thumbnail) {
    thumbnailUrl = thumbnail.secure_url;
  }else{
    thumbnailUrl = videoFile.secure_url
      .replace("/upload/", "/upload/so_auto,du_50/")
      .replace(".mp4", ".jpg");
    console.log("Thumbnail URL: ", thumbnailUrl);
  }

  try {
    const video = await Video.create({
      owner: req.user._id,
      videoFile: videoFile?.url,
      thumbnail: thumbnail?.url || thumbnailUrl,
      title,
      description: description || "",
      duration: videoFile?.duration || 0,
    });

    if (!video) {
      throw new ApiError(500, "Error publishing the video");
    }

    // console.log(` Title: ${title}, Owner: ${owner}, duration: ${duration}`);

    return res
      .status(200)
      .json(new ApiResponse(200, video, "Video published successfully"));
  } catch (error) {
    console.error("Error creating video:", error);
    throw new ApiError(500, "Error creating video");
  }
});

const getVideoById = asyncHandler(async (req, res) => {
  const { videoId } = req.params;
  //TODO: get video by id

  if (!isValidObjectId(videoId)) {
    throw new ApiError(400, "Invalid Video ID");
  }

  const userId = req.user?._id;

  /* 
    Query the database to find the video by its ID.
    - The `findById` method is used to retrieve a specific document using its _id.
    - `populate("owner", "name email")` fetches additional details about the video's owner.
    - Instead of just storing the owner's ID, this will return their name and email too.
    - This is helpful for frontend applications that want to display  the owner's info.
  */
  
  const video = await Video.findById(videoId).populate("owner", "fullname avatar");

  if (!video) {
    throw new ApiError(404, "Video not found");
  }


  if(userId){
    // Use aggregation to check if video exists in watch history and get its position
    const userWatchHistory = await User.findOne(
      { _id: userId },
      { watchHistory: 1 } // project only watchHistory
    );
    
    if (!userWatchHistory) {
      throw new ApiError(401, "Unauthorized access");
    }
    
    const videoIndex = userWatchHistory.watchHistory.findIndex(
      id => id.toString() === videoId.toString()
    );
    
    const isFirstView = videoIndex === -1;
    
    // If first view, increment video view count
    if (isFirstView) {
      video.views += 1;
      await video.save();
    }

    await User.updateOne(
      { 
        _id: userId 
      },
      [
        // First stage: If video exists, filter it out of the array
        {
          $set: {
            watchHistory: {
              $filter: {
                input: "$watchHistory",
                cond: { $ne: ["$$this", new mongoose.Types.ObjectId(videoId)] } // ne selects the documents that don't have the specified value.
              }
            }
          }
        },
        // Second stage: Add video to the beginning of the array
        {
          $set: {
            watchHistory: {
              $concatArrays: [[new mongoose.Types.ObjectId(videoId)], "$watchHistory"]
            }
          }
        }
      ]
    );
  }

  // Count the likes for this video
  const likesCount = await Like.countDocuments({ video: videoId });
  // Count the subscribers of the owner 
  const subscribersCount = await Subscription.countDocuments({ channel: video.owner._id });


  const videoResponse = {
    ...video._doc, // ._doc to remove the mongoose document instance(just returns the video object and nothing else)
    likes: likesCount,
    subscribers: subscribersCount,
  }

  return res
    .status(200)
    .json(new ApiResponse(200, videoResponse, "Video fetched successfully"));
});

const updateVideo = asyncHandler(async (req, res) => {
  const { videoId } = req.params;
  //TODO: update video details like title, description, thumbnail
  const { title, description } = req.body;
  const thumbnailLocalPath = req.file?.path;

  if (!isValidObjectId(videoId)) {
    throw new ApiError(400, "Invalid Video ID");
  }

  let updatedFields = { title, description };

  if (thumbnailLocalPath) {
    const video = await Video.findById(videoId);
    // video.thumbnail.split("/").pop().split(".")[0]
    const oldThumbnailPublicId = video.thumbnail
      ?.split("/")
      .pop()
      .split(".")[0];

    const deletedThumbnail = await deleteFromCloudinary(oldThumbnailPublicId, "image");
    console.log("Old Thumbnail deleted from cloudinary:", deletedThumbnail);
    let thumbnail;
    try {
      thumbnail = await uploadOnCloudinary(thumbnailLocalPath);
      console.log("New Thumbnail uploaded to cloudinary:", thumbnail);
      
    } catch (error) {
      throw new ApiError(500, "Error uploading thumbnail");
    }
    updatedFields.thumbnail = thumbnail?.url;
  }

  const updatedVideo = await Video.findByIdAndUpdate(
    videoId,
    {
      $set: updatedFields,
    },
    {
      new: true,
      runValidators: true,
    }
  );
  if (!updatedVideo) {
    throw new ApiError(404, "Video not found");
  }

  return res
    .status(200)
    .json(new ApiResponse(200, updatedVideo, "Video updated successfully"));
});

const deleteVideo = asyncHandler(async (req, res) => {
  const { videoId } = req.params;

  // TODO: delete video
  // isValidObjectId(videoId) checks if the videoId is a valid MongoDB ObjectId
  if (!isValidObjectId(videoId)) {
    throw new ApiError(400, "Invalid videoId");
  }

  const video = await Video.findById(videoId);
  if (!video) {
    throw new ApiError(400, "Video Not Found");
  }
  // finding the public id of the video file
  const videoPublicId = video.videoFile.split("/").pop().split(".")[0];
  // deleting the video from cloudinary
  console.log("Video Public ID: ", videoPublicId);
  const deletedVideoCloud = await deleteFromCloudinary(videoPublicId, "video");
  console.log("Deleted Video From Cloudinary: ", deletedVideoCloud);

  const thumbnailPublicId = video.thumbnail.split("/").pop().split(".")[0];
  // deleting the thumbnail from cloudinary
  console.log("Thumbnail Public ID: ", thumbnailPublicId);

  const deletedThumbnailCloud = await deleteFromCloudinary(thumbnailPublicId, "image");
  console.log("Deleted Thumbnail From Cloudinary: ", deletedThumbnailCloud);
  

  // console.log("Deleted Video From Cloudinary: ", deletedVideoCloud);
  

  // deleting the video from the database
  // Video.deleteOne({ _id: videoId }) deletes the video from the database
  // Video.deleteMany({ owner: userId }) deletes all videos of the user (extra knowledge)

  const deletedVideo = await Video.deleteOne({ _id: videoId });

  return res
    .status(200)
    .json(
      new ApiResponse(
        200,
        deletedVideo,
        "Video deleted from both database and cloudinary successfully"
      )
    );
});

const togglePublishStatus = asyncHandler(async (req, res) => {
  const { videoId } = req.params;

  if (!isValidObjectId(videoId)) {
    throw new ApiError(400, "Invalid Video ID");
  }
  const video = await Video.findById(videoId);
  video.isPublished = !video.isPublished;

  await video.save();

  return res
    .status(200)
    .json(
      new ApiResponse(200, video, "Video Published Status toggled successfully")
    );
});

export {
  getAllVideos,
  publishAVideo,
  getVideoById,
  updateVideo,
  deleteVideo,
  togglePublishStatus,
};